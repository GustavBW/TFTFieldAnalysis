/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Range } from './Range';
import {
    RangeFromJSON,
    RangeFromJSONTyped,
    RangeToJSON,
} from './Range';

/**
 * On null member, assume all is included
 * @export
 * @interface BranchEntry
 */
export interface BranchEntry {
    /**
     * int | null, id of branch origin point
     * @type {number}
     * @memberof BranchEntry
     */
    start?: number;
    /**
     * String[] | null
     * @type {{ [key: string]: Range; }}
     * @memberof BranchEntry
     */
    includedNamespaces?: { [key: string]: Range; };
    /**
     * String[] | null
     * @type {{ [key: string]: Range; }}
     * @memberof BranchEntry
     */
    includedTags?: { [key: string]: Range; };
    /**
     * int[] | null
     * @type {Array<number>}
     * @memberof BranchEntry
     */
    pointIds?: Array<number>;
}

/**
 * Check if a given object implements the BranchEntry interface.
 */
export function instanceOfBranchEntry(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BranchEntryFromJSON(json: any): BranchEntry {
    return BranchEntryFromJSONTyped(json, false);
}

export function BranchEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): BranchEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'start': !exists(json, 'start') ? undefined : json['start'],
        'includedNamespaces': !exists(json, 'includedNamespaces') ? undefined : (mapValues(json['includedNamespaces'], RangeFromJSON)),
        'includedTags': !exists(json, 'includedTags') ? undefined : (mapValues(json['includedTags'], RangeFromJSON)),
        'pointIds': !exists(json, 'pointIds') ? undefined : json['pointIds'],
    };
}

export function BranchEntryToJSON(value?: BranchEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'start': value.start,
        'includedNamespaces': value.includedNamespaces === undefined ? undefined : (mapValues(value.includedNamespaces, RangeToJSON)),
        'includedTags': value.includedTags === undefined ? undefined : (mapValues(value.includedTags, RangeToJSON)),
        'pointIds': value.pointIds,
    };
}

