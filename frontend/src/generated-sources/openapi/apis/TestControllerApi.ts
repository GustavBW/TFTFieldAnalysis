/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BranchEntry,
} from '../models';
import {
    BranchEntryFromJSON,
    BranchEntryToJSON,
} from '../models';

export interface TestCouldJsonWorkForQueryStringRequest {
    branchArray: string;
}

export interface TestReturnWhatWasReceivedRequest {
    any: string;
    body: object;
}

/**
 * 
 */
export class TestControllerApi extends runtime.BaseAPI {

    /**
     */
    async testCouldJsonWorkForQueryStringRaw(requestParameters: TestCouldJsonWorkForQueryStringRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BranchEntry>>> {
        if (requestParameters.branchArray === null || requestParameters.branchArray === undefined) {
            throw new runtime.RequiredError('branchArray','Required parameter requestParameters.branchArray was null or undefined when calling testCouldJsonWorkForQueryString.');
        }

        const queryParameters: any = {};

        if (requestParameters.branchArray !== undefined) {
            queryParameters['branchArray'] = requestParameters.branchArray;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/test/could-json-work`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BranchEntryFromJSON));
    }

    /**
     */
    async testCouldJsonWorkForQueryString(requestParameters: TestCouldJsonWorkForQueryStringRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BranchEntry>> {
        const response = await this.testCouldJsonWorkForQueryStringRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async testReturnWhatWasReceivedRaw(requestParameters: TestReturnWhatWasReceivedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.any === null || requestParameters.any === undefined) {
            throw new runtime.RequiredError('any','Required parameter requestParameters.any was null or undefined when calling testReturnWhatWasReceived.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling testReturnWhatWasReceived.');
        }

        const queryParameters: any = {};

        if (requestParameters.body !== undefined) {
            queryParameters['body'] = requestParameters.body;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/test/blank/{any}`.replace(`{${"any"}}`, encodeURIComponent(String(requestParameters.any))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async testReturnWhatWasReceived(requestParameters: TestReturnWhatWasReceivedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.testReturnWhatWasReceivedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
