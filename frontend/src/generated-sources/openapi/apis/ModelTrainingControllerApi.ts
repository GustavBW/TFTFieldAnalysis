/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DetailedResponseInteger,
  DetailedResponseListString,
  DetailedResponseString,
  TrainingConfiguration,
} from '../models';
import {
    DetailedResponseIntegerFromJSON,
    DetailedResponseIntegerToJSON,
    DetailedResponseListStringFromJSON,
    DetailedResponseListStringToJSON,
    DetailedResponseStringFromJSON,
    DetailedResponseStringToJSON,
    TrainingConfigurationFromJSON,
    TrainingConfigurationToJSON,
} from '../models';

export interface TrainModelRequest {
    id: number;
    puuid: string;
    trainingConfiguration?: TrainingConfiguration;
}

export interface ValidatePlayerIGNRequest {
    ign: string;
    server: ValidatePlayerIGNServerEnum;
}

/**
 * 
 */
export class ModelTrainingControllerApi extends runtime.BaseAPI {

    /**
     * Static asset retrieval: Get RIOT Account Server Targets.
     */
    async getAccountServerLocationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedResponseListString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/train/serverLocations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetailedResponseListStringFromJSON(jsonValue));
    }

    /**
     * Static asset retrieval: Get RIOT Account Server Targets.
     */
    async getAccountServerLocations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedResponseListString> {
        const response = await this.getAccountServerLocationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Static asset retrieval: Get TFT Server Targets.
     */
    async getValidTFTServerTargetsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedResponseListString>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/train/serverTargets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetailedResponseListStringFromJSON(jsonValue));
    }

    /**
     * Static asset retrieval: Get TFT Server Targets.
     */
    async getValidTFTServerTargets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedResponseListString> {
        const response = await this.getValidTFTServerTargetsRaw(initOverrides);
        return await response.value();
    }

    /**
     * The id of the model when the training is complete (long-polling).
     */
    async trainModelRaw(requestParameters: TrainModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedResponseInteger>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trainModel.');
        }

        if (requestParameters.puuid === null || requestParameters.puuid === undefined) {
            throw new runtime.RequiredError('puuid','Required parameter requestParameters.puuid was null or undefined when calling trainModel.');
        }

        const queryParameters: any = {};

        if (requestParameters.puuid !== undefined) {
            queryParameters['puuid'] = requestParameters.puuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/train/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrainingConfigurationToJSON(requestParameters.trainingConfiguration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetailedResponseIntegerFromJSON(jsonValue));
    }

    /**
     * The id of the model when the training is complete (long-polling).
     */
    async trainModel(requestParameters: TrainModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedResponseInteger> {
        const response = await this.trainModelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cross confirmation: Validate account, returns player puuid.
     */
    async validatePlayerIGNRaw(requestParameters: ValidatePlayerIGNRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedResponseString>> {
        if (requestParameters.ign === null || requestParameters.ign === undefined) {
            throw new runtime.RequiredError('ign','Required parameter requestParameters.ign was null or undefined when calling validatePlayerIGN.');
        }

        if (requestParameters.server === null || requestParameters.server === undefined) {
            throw new runtime.RequiredError('server','Required parameter requestParameters.server was null or undefined when calling validatePlayerIGN.');
        }

        const queryParameters: any = {};

        if (requestParameters.ign !== undefined) {
            queryParameters['ign'] = requestParameters.ign;
        }

        if (requestParameters.server !== undefined) {
            queryParameters['server'] = requestParameters.server;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/train/validate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetailedResponseStringFromJSON(jsonValue));
    }

    /**
     * Cross confirmation: Validate account, returns player puuid.
     */
    async validatePlayerIGN(requestParameters: ValidatePlayerIGNRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedResponseString> {
        const response = await this.validatePlayerIGNRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ValidatePlayerIGNServerEnum = {
    Br1: 'BR1',
    Eun1: 'EUN1',
    Euw1: 'EUW1',
    Jp1: 'JP1',
    Kr: 'KR',
    La1: 'LA1',
    La2: 'LA2',
    Na1: 'NA1',
    Oc1: 'OC1',
    Ph2: 'PH2',
    Ru: 'RU',
    Sg2: 'SG2',
    Th2: 'TH2',
    Tr1: 'TR1',
    Tw2: 'TW2',
    Vn2: 'VN2',
    ErrUnknown: 'ERR_UNKNOWN'
} as const;
export type ValidatePlayerIGNServerEnum = typeof ValidatePlayerIGNServerEnum[keyof typeof ValidatePlayerIGNServerEnum];
