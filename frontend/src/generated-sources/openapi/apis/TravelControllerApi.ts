/* tslint:disable */
/* eslint-disable */
/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DetailedResponseListListTravelBranchOptionDTO,
  DetailedResponseListTravelBranchOptionDTO,
} from '../models';
import {
    DetailedResponseListListTravelBranchOptionDTOFromJSON,
    DetailedResponseListListTravelBranchOptionDTOToJSON,
    DetailedResponseListTravelBranchOptionDTOFromJSON,
    DetailedResponseListTravelBranchOptionDTOToJSON,
} from '../models';

export interface GetBranchOptionsForStepRequest {
    modelId: number;
    context: string;
}

export interface GetFullTravelPathRequest {
    modelId: number;
    context: string;
}

/**
 * 
 */
export class TravelControllerApi extends runtime.BaseAPI {

    /**
     * Retrieves next options for the current travel context
     */
    async getBranchOptionsForStepRaw(requestParameters: GetBranchOptionsForStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedResponseListTravelBranchOptionDTO>> {
        if (requestParameters.modelId === null || requestParameters.modelId === undefined) {
            throw new runtime.RequiredError('modelId','Required parameter requestParameters.modelId was null or undefined when calling getBranchOptionsForStep.');
        }

        if (requestParameters.context === null || requestParameters.context === undefined) {
            throw new runtime.RequiredError('context','Required parameter requestParameters.context was null or undefined when calling getBranchOptionsForStep.');
        }

        const queryParameters: any = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/travel/{modelId}/next`.replace(`{${"modelId"}}`, encodeURIComponent(String(requestParameters.modelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetailedResponseListTravelBranchOptionDTOFromJSON(jsonValue));
    }

    /**
     * Retrieves next options for the current travel context
     */
    async getBranchOptionsForStep(requestParameters: GetBranchOptionsForStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedResponseListTravelBranchOptionDTO> {
        const response = await this.getBranchOptionsForStepRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the full travel context data.
     */
    async getFullTravelPathRaw(requestParameters: GetFullTravelPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetailedResponseListListTravelBranchOptionDTO>> {
        if (requestParameters.modelId === null || requestParameters.modelId === undefined) {
            throw new runtime.RequiredError('modelId','Required parameter requestParameters.modelId was null or undefined when calling getFullTravelPath.');
        }

        if (requestParameters.context === null || requestParameters.context === undefined) {
            throw new runtime.RequiredError('context','Required parameter requestParameters.context was null or undefined when calling getFullTravelPath.');
        }

        const queryParameters: any = {};

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/travel/{modelId}/full`.replace(`{${"modelId"}}`, encodeURIComponent(String(requestParameters.modelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetailedResponseListListTravelBranchOptionDTOFromJSON(jsonValue));
    }

    /**
     * Retrieves the full travel context data.
     */
    async getFullTravelPath(requestParameters: GetFullTravelPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetailedResponseListListTravelBranchOptionDTO> {
        const response = await this.getFullTravelPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
